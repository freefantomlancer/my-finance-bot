import os
import logging
import asyncio # <<< –î–û–ë–ê–í–õ–ï–ù–û: –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î
import aiosqlite # <<< –î–û–ë–ê–í–õ–ï–ù–û: –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –ë–î
import datetime
import threading # <<< –î–û–ë–ê–í–õ–ï–ù–û: –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
from flask import Flask # <<< –î–û–ë–ê–í–õ–ï–ù–û: –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

ADMIN_ID = 432303629
DB_NAME = 'bot_database.db'
BOT_TOKEN = os.getenv("BOT_TOKEN")

def run_health_check_server():
    app = Flask(__name__)
    
    @app.route('/')
    def health_check():
        return "Bot is alive!", 200

    # Timeweb (–∏ –¥—Ä—É–≥–∏–µ PaaS) –ø–µ—Ä–µ–¥–∞—é—Ç –ø–æ—Ä—Ç —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è PORT
    port = int(os.environ.get('PORT', 8080))
    app.run(host='0.0.0.0', port=port)

# --- –°–ü–ò–°–û–ö –û–§–§–ï–†–û–í –ü–û –ö–†–ï–î–ò–¢–ê–ú ---
CREDIT_OFFERS = [
    {
        "name": "–¢-–ë–∞–Ω–∫",
        "image_id": "https://i.postimg.cc/wMCB6t1K/TBANK.png",
        "caption": (
            "üöÄ **–¢-–ë–∞–Ω–∫**\n\n"
            "–û–¥–∏–Ω –∏–∑ —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤. \n\n"
            "‚úÖ **–°—É–º–º–∞ –¥–æ 30 000 000 —Ä—É–±–ª–µ–π –Ω–∞ –ª—é–±—ã–µ —Ü–µ–ª–∏ –Ω–∞ —Å—Ä–æ–∫ –æ—Ç 3 –º–µ—Å—è—Ü–µ–≤ –¥–æ 15 –ª–µ—Ç**\n"
            "‚úÖ –ë–µ–∑ —Å–ø—Ä–∞–≤–æ–∫ –æ –¥–æ—Ö–æ–¥–∞—Ö –∏ –ø–µ—Ä–µ–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –Ω–∞ –±–∞–Ω–∫\n"
            "‚úÖ –†–µ—à–µ–Ω–∏–µ –ø–æ –∑–∞—è–≤–∫–µ –≤ –¥–µ–Ω—å –æ–±—Ä–∞—â–µ–Ω–∏—è"
        ),
        "url": "https://trk.ppdu.ru/click/s2VvyniV?erid=Kra244d1S&sub1=TGBOT"
    },
    {
        "name": "–ë–∞–Ω–∫ –ü–°–ë",
        "image_id": "https://i.postimg.cc/PqsFmdwt/PSB.png",
        "caption": (
            "üí∞ **–ë–∞–Ω–∫ –ü–°–ë**\n\n"
            "–ù–∞–¥–µ–∂–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º –æ–¥–æ–±—Ä–µ–Ω–∏—è.\n\n"
            "‚úÖ **–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ 5 000 000 —Ä—É–±–ª–µ–π. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è, –∏—Å—Ö–æ–¥—è –∏–∑ –ø–ª–∞—Ç–µ–∂–µ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∏ –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–µ–º—â–∏–∫–∞.**\n"
            "‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –æ—Ç 100 000 —Ä—É–±–ª–µ–π\n"
            "‚úÖ –°—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞ –æ—Ç 1 –≥–æ–¥–∞ –¥–æ 7 –ª–µ—Ç"
        ),
        "url": "https://trk.ppdu.ru/click/l5iLa80x?erid=2SDnjcVVfjj&sub1=BOTTG"
    },
]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("werkzeug").setLevel(logging.WARNING) # <<< –î–û–ë–ê–í–õ–ï–ù–û: –æ—Ç–∫–ª—é—á–∞–µ–º –ª–∏—à–Ω–∏–µ –ª–æ–≥–∏ –æ—Ç Flask
logger = logging.getLogger(__name__)


async def init_db(_) -> None:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ë–î –∏ —Å–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç."""
    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            first_seen TEXT,
            last_seen TEXT
        )
        ''')
        await db.commit()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

async def add_or_update_user(user):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è–µ—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î."""
    user_id = user.id
    username = user.username
    first_name = user.first_name
    now = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')

    async with aiosqlite.connect(DB_NAME) as db:
        async with db.execute("SELECT user_id FROM users WHERE user_id = ?", (user_id,)) as cursor:
            user_exists = await cursor.fetchone()

        if user_exists:
            await db.execute(
                "UPDATE users SET last_seen = ?, username = ?, first_name = ? WHERE user_id = ?",
                (now, username, first_name, user_id)
            )
        else:
            await db.execute(
                "INSERT INTO users (user_id, username, first_name, first_seen, last_seen) VALUES (?, ?, ?, ?, ?)",
                (user_id, username, first_name, now, now)
            )
        await db.commit()

async def get_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)."""
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    async with aiosqlite.connect(DB_NAME) as db:
        async with db.execute("SELECT COUNT(user_id) FROM users") as cursor:
            total_users = (await cursor.fetchone())[0]

        today = datetime.date.today().strftime('%Y-%m-%d')
        async with db.execute("SELECT COUNT(user_id) FROM users WHERE date(first_seen) = ?", (today,)) as cursor:
            today_users = (await cursor.fetchone())[0]
        
        async with db.execute("SELECT COUNT(user_id) FROM users WHERE date(last_seen) = ?", (today,)) as cursor:
            active_today = (await cursor.fetchone())[0]

    await update.message.reply_text(f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:**

- –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
- –ù–æ–≤—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {today_users}
- –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {active_today}
""", parse_mode='Markdown')

# --- –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ö–û–ú–ê–ù–î–´ /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await add_or_update_user(update.effective_user) 
    keyboard = [
        [InlineKeyboardButton("üí∏ –ú–∏–∫—Ä–æ–∑–∞–π–º—ã", callback_data='mfo')],
        [InlineKeyboardButton("üíµ –ö—Ä–µ–¥–∏—Ç –Ω–∞–ª–∏—á–Ω—ã–º–∏", callback_data='cash_credit')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç.\n\n"
        "–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"
    )
    
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=text,
        reply_markup=reply_markup
    )
    

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –ù–ê–ñ–ê–¢–ò–ô –ù–ê –ö–ù–û–ü–ö–ò ---
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await add_or_update_user(query.from_user) 
    await query.answer()

    if query.data == 'mfo':
        mfo_text = (
            "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∑–∞–π–º –æ—Ç 1 000 –¥–æ 100 000 —Ä—É–±. –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–π—Ç–∏ –ø–æ –æ–¥–Ω–æ–π –∏–∑ —Å—Å—ã–ª–æ–∫ –Ω–∏–∂–µ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –Ω–∞ —Å–∞–π—Ç–µ. (–í —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç –¥–µ–Ω—å–≥–∏ –ø—Ä–∏–¥—É—Ç –≤–∞–º –Ω–∞ –∫–∞—Ä—Ç—É):\n\n"
            "üôã‚Äç‚ôÄÔ∏è **–°–æ–≤–µ—Ç:** —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏ —Å–∫–æ—Ä–æ—Å—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞–π–º–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –∞–Ω–∫–µ—Ç—ã —Å—Ä–∞–∑—É –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–æ–º–ø–∞–Ω–∏—è—Ö, –∞ –ª—É—á—à–µ –≤–æ –≤—Å–µ—Ö!\n\n"
            "‚ù§Ô∏è **–ó–ê–ô–ú–ï–†** - –ê–∫—Ü–∏—è ¬´–ü–µ—Ä–≤—ã–π –∑–∞–π–º –ø–æ–¥ 0% –¥–æ 30.000‚ÇΩ¬ª\n"
            "‚û°Ô∏è https://clck.ru/3Ns9sK\n\n"
            "üî• **MONEYMAN** - –ü–µ—Ä–≤—ã–π –∑–∞–π–º –ø–æ–¥ 0% –¥–æ 100.000‚ÇΩ.\n"
            "‚û°Ô∏è https://clck.ru/3Ns9tX\n\n"
            "**Webbankir** - –ü–µ—Ä–≤—ã–π –∑–∞–π–º –ø–æ–¥ 0% –¥–æ 30.000‚ÇΩ\n"
            "‚û°Ô∏è https://clck.ru/3NtDVN\n\n"
            "üî• **–ï-–ö–ê–ü–£–°–¢–ê** - –ü–µ—Ä–≤—ã–π –∑–∞–π–º –¥–æ 50 000 —Ä—É–±.\n"
            "‚û°Ô∏è https://clck.ru/3Ns9wo\n\n"
            "üî• **Cashiro** - –ü–µ—Ä–≤—ã–π –∑–∞–π–º –ø–æ–¥ 0% –¥–æ 30.000\n"
            "‚û°Ô∏è https://clck.ru/3Ns9yS\n\n"
            "üî• **Max.Credit** - –ü–µ—Ä–≤—ã–π –∑–∞–π–º –ø–æ–¥ 0% –¥–æ 30.000‚ÇΩ\n"
            "‚û°Ô∏è https://clck.ru/3NsA6G\n\n"
            "üî• **–î–æ –ó–∞—Ä–ø–ª–∞—Ç—ã** - –ü–µ—Ä–≤—ã–π –∑–∞–π–º –ø–æ–¥ 0% –¥–æ 30.000‚ÇΩ\n"
            "‚û°Ô∏è https://clck.ru/3NsA7M\n\n"
            "**–£–º–Ω—ã–µ –ù–∞–ª–∏—á–Ω—ã–µ** - –ü–µ—Ä–≤—ã–π –∑–∞–π–º –ø–æ–¥ 0% –¥–æ 30.000‚ÇΩ\n"
            "‚û°Ô∏è https://clck.ru/3NtDWC\n\n"
            "**Credit7** - –ü–µ—Ä–≤—ã–π –∑–∞–π–º –ø–æ–¥ 0% –¥–æ 30.000‚ÇΩ\n"
            "‚û°Ô∏è https://clck.ru/3NtDWs\n\n"
            "**Boostra** - –ü–µ—Ä–≤—ã–π –∑–∞–π–º –ø–æ–¥ 0% –¥–æ 30.000‚ÇΩ\n"
            "‚û°Ô∏è https://clck.ru/3NtDXh\n\n"
            "üî• **–ê –î–µ–Ω—å–≥–∏** - –ü–µ—Ä–≤—ã–π –∑–∞–π–º –ø–æ–¥ 0% –¥–æ 30.000‚ÇΩ\n"
            "‚û°Ô∏è https://clck.ru/3NsA8o\n\n"
            "**–í–∞—à –∫—Ä–µ–¥–∏—Ç** - –ü–µ—Ä–≤—ã–π –∑–∞–π–º –ø–æ–¥ 0% –¥–æ 30.000‚ÇΩ\n"
            "‚û°Ô∏è https://clck.ru/3NsAAC\n\n"
            "**–°–≤–æ–∏ –ª—é–¥–∏** - –ü–µ—Ä–≤—ã–π –∑–∞–π–º –ø–æ–¥ 0% –¥–æ 30.000‚ÇΩ\n"
            "‚û°Ô∏è https://clck.ru/3NsAAj\n\n"
            "**–ó–ê–Å–ú.–†–£** - –ü–µ—Ä–≤—ã–π –∑–∞–π–º –ø–æ–¥ 0% –¥–æ 30.000‚ÇΩ\n"
            "‚û°Ô∏è https://clck.ru/3NsA84\n\n"
            "**–î–µ–Ω—å–≥–∏–°—Ä–∞–∑—É** - –ü–µ—Ä–≤—ã–π –∑–∞–π–º –ø–æ–¥ 0% –¥–æ 30.000‚ÇΩ\n"
            "‚û°Ô∏è https://clck.ru/3NsA5X\n\n"
            "‚Ü©Ô∏è –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ /start"
        )
        
        await query.message.reply_text(
            text=mfo_text,
            parse_mode='Markdown',
            disable_web_page_preview=True
        )
            
    elif query.data == 'cash_credit':
        await query.message.reply_text("–¢–∞–∫, –∫–∞–∂–µ—Ç—Å—è, —è –∫–æ–µ-—á—Ç–æ –Ω–∞—à–µ–ª –¥–ª—è —Ç–µ–±—è. –ü–æ—Å–º–æ—Ç—Ä–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:")
        for offer in CREDIT_OFFERS:
            keyboard = [[InlineKeyboardButton("‚û°Ô∏è –ü–æ–ª—É—á–∏—Ç—å –¥–µ–Ω—å–≥–∏", url=offer["url"])]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # --- –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É ---
            await context.bot.send_photo(
                chat_id=query.message.chat_id,
                photo=offer["image_id"],
                caption=offer["caption"],
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="‚Ü©Ô∏è –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ /start"
        )
    
    else:
        await query.edit_message_text(text="–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é.")



# --- –ó–ê–ü–£–°–ö –ë–û–¢–ê ---

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∏ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è."""

    # <<< –ò–ó–ú–ï–ù–ï–ù–û: –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ >>>
    health_thread = threading.Thread(target=run_health_check_server, daemon=True)
    health_thread.start()
    logger.info("Health check server started in a separate thread.")

    application = (
        Application.builder()
        .token(BOT_TOKEN)
        .post_init(init_db)
        .build()
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("stats", get_stats))
    application.add_handler(CallbackQueryHandler(button_handler))

    application.run_polling()

if __name__ == "__main__":
    main()